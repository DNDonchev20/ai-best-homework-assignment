// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  TEACHER
  ADMIN
}

model Users {
  id        String   @id @default(cuid())

  email     String   @unique
  firstName String
  lastName  String
  password  String

  role      Role     @default(USER)
  refreshToken String?

  isActivated Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Teachers Teachers[]
  StudentDetails StudentDetails[]
}

model Subjects {
  id        String   @id @default(cuid())

  name      String   @unique
  code      String?   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Teachers Teachers[]
}

model Groups {
  id        String   @id @default(cuid())

  name      String   @unique
  code      String?   @unique

  year      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Homeworks Homeworks[]
}

model Teachers {
  id        String   @id @default(cuid())

  userId    String   @unique
  subjectId String
  groupIds   String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      Users?    @relation(fields: [userId], references: [id])
  subjects   Subjects? @relation(fields: [subjectId], references: [id])

  Homeworks Homeworks[]
}

model StudentDetails {
  id        String   @id @default(cuid())

  userId    String   @unique
  groupIds   String[]
  classNumber Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      Users?    @relation(fields: [userId], references: [id])
}

model Homeworks {
  id        String   @id @default(cuid())

  teacherId String
  groupId   String

  title     String
  description String
  dueDate   String

  maxPoints Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group     Groups?   @relation(fields: [groupId], references: [id])
  teacher   Teachers? @relation(fields: [teacherId], references: [id])
}

model HomeworkSubmissions {
  id        String   @id @default(cuid())

  homeworkId String
  studentId  String

  submissionDate DateTime @default(now())

  filePath  String?

  feedback  String? 

  isGraded  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Grades Grades[]
}

model Grades {
  id        String   @id @default(cuid())

  teacherId String
  studentId String
  homeworkSubmissionId String @unique

  grade     Int
  percentage Int
  feedback  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  homeworkSubmissions HomeworkSubmissions? @relation(fields: [homeworkSubmissionId], references: [id])
}